// <auto-generated />
using System;
using It_Swarm_Test_Project.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace It_Swarm_Test_Project.Migrations
{
    [DbContext(typeof(MeterContext))]
    [Migration("20241106173117_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("It_Swarm_Test_Project.Models.Database.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentMeterId")
                        .HasColumnType("integer");

                    b.Property<string>("XPathName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrentMeterId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("It_Swarm_Test_Project.Models.Database.Meter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastVerificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("NextVerificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Meters");
                });

            modelBuilder.Entity("It_Swarm_Test_Project.Models.Database.MeterReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MeterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MeterId");

                    b.ToTable("MeterReadings");
                });

            modelBuilder.Entity("It_Swarm_Test_Project.Models.Database.MeterReplacementHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InstallationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("NewMeterId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviousMeterReadingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("NewMeterId");

                    b.HasIndex("PreviousMeterReadingId");

                    b.ToTable("MeterReplacementHistories");
                });

            modelBuilder.Entity("It_Swarm_Test_Project.Models.Database.Apartment", b =>
                {
                    b.HasOne("It_Swarm_Test_Project.Models.Database.Meter", "CurrentMeter")
                        .WithMany()
                        .HasForeignKey("CurrentMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentMeter");
                });

            modelBuilder.Entity("It_Swarm_Test_Project.Models.Database.MeterReading", b =>
                {
                    b.HasOne("It_Swarm_Test_Project.Models.Database.Meter", "Meter")
                        .WithMany("Readings")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("It_Swarm_Test_Project.Models.Database.MeterReplacementHistory", b =>
                {
                    b.HasOne("It_Swarm_Test_Project.Models.Database.Apartment", "Apartment")
                        .WithMany("ReplacementHistories")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("It_Swarm_Test_Project.Models.Database.Meter", "NewMeter")
                        .WithMany("ReplacementHistories")
                        .HasForeignKey("NewMeterId");

                    b.HasOne("It_Swarm_Test_Project.Models.Database.MeterReading", "PreviousMeterReading")
                        .WithMany()
                        .HasForeignKey("PreviousMeterReadingId");

                    b.Navigation("Apartment");

                    b.Navigation("NewMeter");

                    b.Navigation("PreviousMeterReading");
                });

            modelBuilder.Entity("It_Swarm_Test_Project.Models.Database.Apartment", b =>
                {
                    b.Navigation("ReplacementHistories");
                });

            modelBuilder.Entity("It_Swarm_Test_Project.Models.Database.Meter", b =>
                {
                    b.Navigation("Readings");

                    b.Navigation("ReplacementHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
